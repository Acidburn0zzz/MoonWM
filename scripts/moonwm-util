#!/bin/sh

# env variables to set:
# MOONWM_WALLPAPER MOONWM_KEYMAP BROWSER DMENUCMD TERMINAL (MOONWM_INTERNAL_SCREEN MOONWM_PICOM MOONWM_NOTIFYD MOONWM_STATUSHANDLER)

TEMPORARYDIR="${TMPDIR:-/tmp}/moonwm/${USER:-default}"
[ -d "$TEMPORARYDIR" ] || mkdir -vp "$TEMPORARYDIR"
LOCK_TMP_FILE="$TEMPORARYDIR/lockfile.png"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/moonwm"
CONFIG_FILE="$CONFIG_DIR/config.env"
MODMAP_FILE="$CONFIG_DIR/modmap"

autostart () {
    # Configure X
    wmname LG3D
    xwallpaper --zoom "$MOONWM_WALLPAPER" 2> /dev/null &
    setup_keyboard

    # Other daemons
    killall -9 sxhkd 2> /dev/null; run sxhkd sxhkd

    rm "${XDG_CACHE_HOME:-$HOME/.cache}/moonwm-xdg-xmenu/*.part"
    moonwm-xdg-xmenu -u

    autostart_async &
}

autostart_async () {
    # Load xmenu defaults
    load_xmenu_defaults

    # Daemons that automatically check for running instances
    run /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 \
        /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
    env_def_true MOONWM_NOTIFYD && run "$(get_default_notification_daemon)" "$(get_default_notification_daemon)"
    run kdeconnect-indicator kdeconnect-indicator
    run nm-applet nm-applet
    run xfce4-power-manager xfce4-power-manager

    # Applets & tray icons
    (killall -9 /usr/lib/geoclue-2.0/demos/agent; /usr/lib/geoclue-2.0/demos/agent & sleep 5;
    run redshift "killall -9 redshift; redshift -x; redshift -l geoclue2") &

    pidof touchegg > /dev/null || rm ~/.config/touchegg/.touchegg.lock
    run touchegg "touchegg --daemon $TOUCHEGG_THRESHOLDS"
    run touchegg touchegg

    # Auto setup displays
    if [ -x ~/.screenlayout/autoload.sh ]; then
        ~/.screenlayout/autoload.sh
        xwallpaper --zoom "$MOONWM_WALLPAPER"
    else
        setup_displays
    fi


    # Run nextcloud last so polkit is up
    run nextcloud "nextcloud --background"

    # Start compositor
    sleep 2
    if env_def_true MOONWM_PICOM; then
        if env_def_false MOONWM_PICOMEXP; then
            run picom "killall -9 picom; picom --experimental-backends"
        else
            run picom "killall -9 picom; picom"
        fi
    fi

}

brightness () {
    if [ "$1" -lt 0 ]; then
        light -U "$(echo "$1" | sed 's/-//')"
    elif [ "$1" -gt 0 ]; then
        light -A "$(echo "$1" | sed 's/-//')"
    fi
    if command -v dunstify > /dev/null 2>&1; then
        dunstify -r 225423 -a Brightness -i "notification-display-brightness" "Set brightness to $(light | sed 's/\..*//g')%"
    else
        notify-send -a Brightness -i "notification-display-brightness" "Set brightness to $(light | sed 's/\..*//g')%"
    fi
}

default_dmenu_run () {
    dmenu_path | \
    	$0 dmenu "$@" | \
        sh
}

dmenu_drun () {
    list="$(moonwm-xdg-xmenu | sed 's/IMG:[a-zA-Z0-9./_-]*//;s/^\s*//' | grep '	')"
    selected="$(echo "$list" | cut -f1 | $0 dmenu -i "$@")" \
    	&& if echo "$list" | grep -F "$selected" > /dev/null; then
           eval "$(echo "$list" | grep -F "$selected" | head -n 1 | cut -f2)"
       else
           eval "$selected"
       fi
    nice moonwm-xdg-xmenu -u &
}

dmenu_wrapper () {
    if env_def_true MOONWM_THEMEDDMENU; then
        exec dmenu -i -nb '#1d2021' -nf '#ebdbb2' -sb '#fb4934' -sf '#1d2021' -fn 'FiraCode Nerd Font:size=10' "$@"
    else
       	exec dmenu "$@"
   	fi
}

env_is_set () {
    env | grep "^$1=" > /dev/null
}

# for settings that default to false
env_def_false () {
    env_is_set "$1" && [ "$(eval echo "\$$1")" = "1" ]
}

# for settings that default to true
env_def_true () {
    (! env_is_set "$1") || [ "$(eval echo "\$$1")" = "1" ]
}

get_default_browser () {
    if command -v firefox > /dev/null 2>&1; then
        echo firefox
    elif command -v chromium > /dev/null 2>&1; then
        echo chromium
    elif command -v chrome > /dev/null 2>&1; then
        echo chrome
    else
        return 1
    fi
}

get_default_dmenucmd () {
    if command -v rofi > /dev/null 2>&1; then
        echo rofi -show drun
    elif command -v dmenu_run > /dev/null 2>&1; then
        echo moonwm-util drun
    else
        return 1
    fi
}

get_default_notification_daemon () {
    if command -v dunst > /dev/null 2>&1; then
        echo dunst
    elif command -v /usr/lib/notification-daemon-1.0/notification-daemon > /dev/null 2>&1; then
        echo /usr/lib/notification-daemon-1.0/notification-daemon
    elif command -v /usr/lib/xfce4/notifyd/xfce4-notifyd > /dev/null; then
        echo /usr/lib/xfce4/notifyd/xfce4-notifyd
    elif command -v /usr/lib/notify-osd/notify-osd > /dev/null; then
        echo /usr/lib/notify-osd/notify-osd
    else
        return 1
    fi
}

get_default_terminal () {
    if command -v gnome-terminal > /dev/null 2>&1; then
        echo gnome-terminal
    elif command -v xfce4-terminal > /dev/null 2>&1; then
        echo xfce4-terminal
    elif command -v alacritty > /dev/null 2>&1; then
        echo alacritty
    elif command -v uxterm > /dev/null 2>&1; then
        echo uxterm
    else
        return 1
    fi
}

load_env_defaults () {
    if (! env_is_set TERMINAL) && get_default_terminal; then
        export TERMINAL="$(get_default_terminal)"
        export TERM="xterm-256color"
    fi
    if (! env_is_set BROWSER) && get_default_browser; then
        export BROWSER="$(get_default_browser)"
    fi
    if ! env_is_set DMENUCMD; then
        export DMENUCMD="$(get_default_dmenucmd)"
    fi
    if ! env_is_set MOONWM_STATUSCMD; then
        export MOONWM_STATUSCMD="moonwm-status"
    fi
}

load_xmenu_defaults () {
    xrdb_has '\*background' \
        || xrdb_set_color '*background' '#1d2021'
    xrdb_has '\*foreground' \
        || xrdb_set_color '*foreground' '#ebdbb2'
    xrdb_has xmenu.border \
        || xrdb_set_color xmenu.border '#1d2021'
    xrdb_has xmenu.foreground \
        || xrdb_set_color xmenu.foreground '#ebdbb2'
    xrdb_has xmenu.background \
        || xrdb_set_color xmenu.background '#1d2021'
    xrdb_has xmenu.selforeground \
        || xrdb_set_color xmenu.selforeground '#1d2021'
    xrdb_has xmenu.selbackground \
        || xrdb_set_color xmenu.selbackground '#ebdbb2'
}

generate_lock_file () {
    resolution="$(get_primary_resolution)"
    if ! [ "$(file "$LOCK_TMP_FILE" | cut -f11 -d',' | sed 's/\s//g')" = "$resolution" ]; then
        nice -n 19 convert -blur 0x8 -resize "$resolution"^ -crop "$resolution"+0+0 "$MOONWM_WALLPAPER" "$LOCK_TMP_FILE"
    fi
}

get_primary_resolution () {
    xrandr | grep '\*' | sed 's/^\s*\([0-9]*x[0-9]*\).*/\1/g' | head -n 1
}

launch () {
    # Load user configuration
    if [ -f "$CONFIG_FILE" ]; then
        set -o allexport
        . "$CONFIG_FILE"
        set +o allexport
    fi

    # Load default values for env variables
    load_env_defaults

    xrdb -merge ~/.Xresources

    exec moonwm
}

launch_valgrind () {
    logfile="${XDG_DATA_HOME:-$USER/.local/share}/moonwm/valgrind.log"
    options="--leak-check=full --show-leak-kinds=all --track-origins=yes -v"

    # Load user configuration
    if [ -f "$CONFIG_FILE" ]; then
        set -o allexport
        . "$CONFIG_FILE"
        set +o allexport
    fi

    # Load default values for env variables
    load_env_defaults

    xrdb -merge ~/.Xresources

    [ -f "$logfile" ] && mv "$logfile" "$logfile.bak"

    exec valgrind $options moonwm > "$logfile" 2>&1
}

layouts () {
    layout="$HOME/.screenlayout/$(ls -1u ~/.screenlayout/ | $0 dmenu -p "Layouts: ")"
    if [ -x "$layout" ]; then
        sh -c "$layout"
        setup_keyboard
        xwallpaper --zoom "$MOONWM_WALLPAPER"
        (sleep 20; generate_lock_file) &
    fi
}

lock () {
    if pidof lightdm > /dev/null; then
        dm-tool lock
    else
        [ -f "$LOCK_TMP_FILE" ] || generate_lock_file
        i3lock -c 1d2021 -i "$LOCK_TMP_FILE"
    fi
}

run () {
    # 1: executable to test for
    # 2: command to execute
    # 3: '1' to run synchronously
    if ( [ -z "$1" ] || command -v "$1" > /dev/null 2>&1 ); then
        if [ "$3" = 1 ]; then
            echo "$2" | sh
        else
            echo "$2" | sh &
        fi
    fi
}

screenshot () {
    dest="$XDG_PICTURES_DIR"
    [ -d "$dest" ] || dest="$HOME/Pictures"
    [ -d "$dest" ] || dest="$HOME/"
    dest="$dest/Screenshots/"
    [ -d "$dest" ] || mkdir -p "$dest"

    filename="$(date +'Screenshot_%Y-%m-%d_%H-%M-%S.png')"
    success="-1"

    case $1 in
        "")
            scrot -s -f "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        screen)
            scrot "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        focused)
            scrot -u "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
    esac

    if [ "$success" = 0 ]; then
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/screen-capture.oga 2> /dev/null &
        if command -v dunstify > /dev/null 2>&1; then
            dunstify -a Screenshot -i "$dest/$filename" "Successfully taken screenshot" \
                --action "$FILEMANAGER $dest,open" | sh 2> /dev/null
        else
            notify-send -a Screenshot -i "$dest/$filename" "Successfully taken screenshot"
        fi
    fi
}

setup_displays () {
    connected="$(xrandr | grep " connected " | cut -d " " -f 1)"
    disconnected="$(xrandr | grep " disconnected " | cut -d " " -f 1)"

    for display in $connected; do
        if [ "$display" = "$MOONWM_INTERNAL_SCREEN" ] \
                && grep closed /proc/acpi/button/lid/LID/state > /dev/null ; then
            echo "Disabling $display (closed lid)"
            xrandr --output "$display" --off
        elif [ -z "$last" ]; then
            echo "Setting up first display: $display"
            xrandr --output "$display" --auto --primary
            last="$display"
        else
            echo "Setting up $display next to $display"
            xrandr --output "$display" --auto --right-of "$last"
            last="$display"
        fi
    done

    # Preventing initialization of VIRTUAL1 on undock
    for display in $disconnected; do
        xrandr --output "$display" --off
    done

    xwallpaper --zoom "$MOONWM_WALLPAPER"
    setup_keyboard
    (sleep 20; generate_lock_file) &
}

setup_keyboard () {
    [ -n "$MOONWM_KEYMAP" ] && setxkbmap $MOONWM_KEYMAP
    [ -f "$MODMAP_FILE" ] && \
        xmodmap - < "$MODMAP_FILE"
    return 0
}

volume () {
    if [ "$1" = "mute" ]; then
        pamixer -t
    elif [ "$1" -lt 0 ]; then
        pamixer -d "$(echo "$1" | sed 's/-//')"
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    elif [ "$1" -gt 0 ]; then
        pamixer -i "$(echo "$1" | sed 's/-//')"
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    fi
    [ -n "$MOONWM_STATUSCMD" ] && $MOONWM_STATUSCMD update
}

xrdb_get_color () {
    xrdb -query -all | grep "^$1": | sed 's/.*#/#/g' | sort | head -n 1
}

xrdb_has () {
    xrdb -query -all | grep "^$1": > /dev/null
}

xrdb_set_color () {
    echo "$1: $2" | xrdb -merge
}

helptext="
moonwm-util [-h] [-r] command

options:
    -h    Prints this help text
    -r    Check if MoonWM is running first

commands:
    brightness     Change display brightness (e.g. moonwm-util brightness -5)
    dmenu          Themed wrapper for dmenu (for use in scripts etc.)
    drun           Default application launcher
    help           Prints this help text
    launch         Wrapper to launch MoonWM properly (used in moonwm.desktop, can be used in .xinitrc)
    lock           Locks the screen
    run            Launcher with all exectutables in \$PATH
    screenlayouts  Select monitor configuration via dmenu
    screensetup    Set up monitors with default procedure
    screenshot     Take a screenshot (optionally takes 'screen' or 'focused' as arguments)
    setup-keyboard Initialize keyboard layout
    start          Launch autostart applications
    volume         Change output volume (e.g. moonwm-util volume -5 or moonwm-util volume mute)
"

while getopts "hr" arg; do
    case "$arg" in
        h)
            echo "$helptext"
            exit
            ;;
        r)
            if ! pidof moonwm > /dev/null; then
                echo "MoonWM is not running."
                exit 1
            fi
            shift
            ;;
    esac
done


case $1 in
    brightness) brightness "$2";;
    dmenu) shift; dmenu_wrapper "$@";;
    drun) shift; dmenu_drun "$@";;
    help) echo "$helptext"; exit;;
    launch) launch;;
    launch-valgrind) launch_valgrind;;
    lock) lock;;
    run) shift; default_dmenu_run "$@";;
    screenlayouts) layouts;;
    screensetup) setup_displays;;
    screenshot) screenshot "$2";;
    setup-keyboard) setup_keyboard;;
    start) autostart;;
    volume) volume "$2";;
    *) printf "Unknown operation '$1'.\nTry 'moonwm-util -h' for more information.\n"; exit 1;;
esac

