#!/bin/sh

# env variables to set:
# MOONWM_WALLPAPER MOONWM_KEYMAP BROWSER DMENUCMD TERMINAL (MOONWM_INTERNAL_SCREEN MOONWM_NOPICOM MOONWM_NODUNST MOONWM_STATUSHANDLER)

LOCK_TMP_FILE="/tmp/lockfile.png"

autostart () {
    # Configure X
    wmname LG3D
    setxkbmap $MOONWM_KEYMAP
    xwallpaper --zoom "$MOONWM_WALLPAPER" 2> /dev/null &

    # Other daemons
    killall -9 sxhkd 2> /dev/null; run sxhkd sxhkd

    autostart_async &
}

autostart_async () {
    # Show status
    [ -z "$MOONWM_NOSTATUS" ] && $0 status &

    # Load xmenu defaults
    load_xmenu_defaults

    # Daemons that automatically check for running instances
    run /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 \
        /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
    [ -z "$MOONWM_NODUNST" ] && run dunst dunst
    run kdeconnect-indicator kdeconnect-indicator
    run nm-applet nm-applet
    run xfce4-power-manager xfce4-power-manager

    # Applets & tray icons
    (killall -9 /usr/lib/geoclue-2.0/demos/agent; /usr/lib/geoclue-2.0/demos/agent & sleep 5;
    killall -9 redshift; redshift -x; redshift -l geoclue2) &

    run touchegg "touchegg --daemon"
    run touchegg touchegg

    # Start compositor
    [ -z "$MOONWM_NOPICOM" ] && run picom "killall -9 picom && picom"

    # Auto setup displays
    setup_displays

    # Run nextcloud last so polkit is up
    run nextcloud "nextcloud --background"
}

brightness () {
    if [ "$1" -lt 0 ]; then
        light -U "$(echo "$1" | sed 's/-//')"
    elif [ "$1" -gt 0 ]; then
        light -A "$(echo "$1" | sed 's/-//')"
    fi
    if command -v dunstify > /dev/null 2>&1; then
        dunstify -r 225423 -a Brightness -i "notification-display-brightness" "Set brightness to $(light | sed 's/\..*//g')%"
    else
        notify-send -a Brightness -i "notification-display-brightness" "Set brightness to $(light | sed 's/\..*//g')%"
    fi
}

get_default_browser () {
    if command -v firefox > /dev/null 2>&1; then
        echo firefox
    elif command -v chromium > /dev/null 2>&1; then
        echo chromium
    elif command -v chrome > /dev/null 2>&1; then
        echo chrome
    else
        return 1
    fi
}

get_default_dmenucmd () {
    if command -v rofi > /dev/null 2>&1; then
        echo "rofi -show drun"
    elif command -v dmenu > /dev/null 2>&1; then
        echo dmenu
    else
        return 1
    fi
}

get_default_terminal () {
    if command -v gnome-terminal > /dev/null 2>&1; then
        echo gnome-terminal
    elif command -v xfce4-terminal > /dev/null 2>&1; then
        echo xfce4-terminal
    elif command -v alacritty > /dev/null 2>&1; then
        echo alacritty
    elif command -v uxterm > /dev/null 2>&1; then
        echo uxterm
    else
        return 1
    fi
}

load_env_defaults () {
    if (! env | grep '^TERMINAL=' > /dev/null) \
            && get_default_terminal; then
        export TERMINAL="$(get_default_terminal)"
        export TERM="xterm-256color"
    fi
    if (! env | grep '^BROWSER=' > /dev/null) \
            && get_default_browser; then
        export BROWSER="$(get_default_browser)"
    fi
    if (! env | grep '^DMENUCMD=' > /dev/null); then
        export DMENUCMD="$(get_default_dmenucmd)"
    fi
}

load_xmenu_defaults () {
    xrdb_has xmenu.border \
        || xrdb_set_color xmenu.border '#1d2021'
    xrdb_has xmenu.foreground \
        || xrdb_set_color xmenu.foreground '#ebdbb2'
    xrdb_has xmenu.background \
        || xrdb_set_color xmenu.background '#1d2021'
    xrdb_has xmenu.selforeground \
        || xrdb_set_color xmenu.selforeground '#1d2021'
    xrdb_has xmenu.selbackground \
        || xrdb_set_color xmenu.selbackground '#ebdbb2'
}

moonwmstatus () {
    kill -9 $(pgrep "$(basename $0) status" | grep -v $$) 2> /dev/null
    while true; do
        xsetroot -name "$(get_status)"
        sleep 2 2> /dev/null
    done
}

generate_lock_file () {
    resolution="$(get_primary_resolution)"
    if ! [ "$(file "$LOCK_TMP_FILE" | cut -f11 -d',' | sed 's/\s//g')" = "$resolution" ]; then
        nice -n 19 convert -blur 0x8 -resize "$resolution"^ -crop "$resolution"+0+0 "$MOONWM_WALLPAPER" "$LOCK_TMP_FILE"
    fi
}

get_primary_resolution () {
    xrandr | grep '\*' | sed 's/^\s*\([0-9]*x[0-9]*\).*/\1/g' | head -n 1
}

get_status () {
    if pamixer --get-mute > /dev/null; then
        printf ' 婢'
    else
        printf ' 墳'
    fi
    printf " %s%% |" "$(pamixer --get-volume)"
    printf "\x01 %s |" "$(date '+%R %D')"
    printf "|\n"
}

handle_status () {
    if [ -n "$MOONWM_STATUSHANDLER" ]; then
        $MOONWM_STATUSHANDLER
        return
    fi
    case $STATUSCMDN in
        0)
            case $BUTTON in
                1) volume mute;;
                4) volume +5;;
                5) volume -5;;
            esac;;
        1)
            case $BUTTON in
                1) notify-send -a "$(date)" "$(cal -n 2)";;
            esac;;
    esac
}

launch () {
    # Load default values for env variables
    load_env_defaults

    xrdb -merge ~/.Xresources
    exec moonwm
}

layouts () {
    layout="$HOME/.screenlayout/$(ls -1u ~/.screenlayout/ | dmenu -p "Layouts: ")"
    if [ -x "$layout" ]; then
        sh -c "$layout"
        xwallpaper --zoom "$MOONWM_WALLPAPER"
        generate_lock_file &
    fi
}

lock () {
    [ -f "$LOCK_TMP_FILE" ] || generate_lock_file
    i3lock -c 1d2021 -i "$LOCK_TMP_FILE"
}

run () {
    # 1: executable to test for
    # 2: command to execute
    # 3: '1' to run synchronously
    if ( [ -z "$1" ] || command -v $1 > /dev/null 2>&1 ); then
        if [ "$3" = 1 ]; then
            $2
        else
            $2 &
        fi
    fi
}

screenshot () {
    dest="$XDG_PICTURES_DIR"
    [ -d "$dest" ] || dest="~/Pictures"
    [ -d "$dest" ] || dest="~/"
    dest="$dest/Screenshots/"
    [ -d "$dest" ] || mkdir -p $dest

    filename="$(date +'Screenshot_%Y-%m-%d_%H-%M-%S.png')"
    success="-1"

    case $1 in
        "")
            scrot -s -f "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        screen)
            scrot "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
        focused)
            scrot -u "$filename" -e "mv -f \$f $dest"
            success="$?"
            ;;
    esac

    ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/screen-capture.oga 2> /dev/null &
    if command -v dunstify > /dev/null 2>&1; then
        dunstify -a Screenshot -i "$dest/$filename" "Successfully taken screenshot" \
            --action "$FILEMANAGER $dest,open" | sh 2> /dev/null
    else
        notify-send -a Screenshot -i "$dest/$filename" "Successfully taken screenshot"
    fi
}

setup_displays () {
    connected="$(xrandr | grep " connected " | cut -d " " -f 1)"
    disconnected="$(xrandr | grep " disconnected " | cut -d " " -f 1)"

    for display in $connected; do
        if [ "$display" = "$MOONWM_INTERNAL_SCREEN" ] \
                && grep closed /proc/acpi/button/lid/LID/state > /dev/null ; then
            echo "Disabling $display (closed lid)"
            xrandr --output "$display" --off
        elif [ -z "$last" ]; then
            echo "Setting up first display: $display"
            xrandr --output "$display" --auto --primary
            last="$display"
        else
            echo "Setting up $display next to $display"
            xrandr --output "$display" --auto --right-of "$last"
            last="$display"
        fi
    done

    # Preventing initialization of VIRTUAL1 on undock
    for display in $disconnected; do
        xrandr --output $display --off
    done

    xwallpaper --zoom "$MOONWM_WALLPAPER"
    (sleep 20; generate_lock_file) &
}

volume () {
    if [ "$1" = "mute" ]; then
        pamixer -t
    elif [ "$1" -lt 0 ]; then
        pamixer -d "$(echo "$1" | sed 's/-//')"
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    elif [ "$1" -gt 0 ]; then
        pamixer -i "$(echo "$1" | sed 's/-//')"
        ffplay -nodisp -autoexit /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga 2> /dev/null
    fi
    [ -z "$MOONWM_NOSTATUS" ] && xsetroot -name "$(get_status)"
}

xrdb_get_color () {
    xrdb -query -all | grep "^$1": | sed 's/.*#/#/g' | sort | head -n 1
}

xrdb_has () {
    xrdb -query -all | grep "^$1": > /dev/null
}

xrdb_set_color () {
    echo "$1: $2" | xrdb -merge
}


case $1 in
    brightness) brightness "$2";;
    screensetup) setup_displays;;
    launch) launch;;
    screenlayouts) layouts;;
    screenshot) screenshot "$2";;
    lock) lock;;
    start) autostart;;
    status) moonwmstatus;;
    statushandler) handle_status;;
    volume) volume "$2";;
    *) echo "Unknown operation"; exit 1;;
esac

